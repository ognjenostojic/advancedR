{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2
    ],
    "data": [
        "+ ",
        "    })",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Usage of the function",
        "> ",
        "# main",
        "> ",
        "",
        "> ",
        "file_paths <- list.files(\"C:/Users/Ognjen/Documents/data/adv_r_data_test\",",
        "+ ",
        "                         pattern = \"\\\\.nc$\", full.names = TRUE)",
        "> ",
        "results_list <- process_nc_files(file_paths)",
        "> ",
        "create_and_save_idf_plots(results_list)",
        "Error processing file: C:/Users/Ognjen/Documents/data/adv_r_data_test/CZ_pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_CNRM-ALADIN63_v2_1hr_195101010030-195112312330.nc\n",
        "Error message: object 'prec' not found\n",
        "Error processing file: C:/Users/Ognjen/Documents/data/adv_r_data_test/CZ_pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_CNRM-ALADIN63_v2_1hr_195201010030-195212312330.nc\n",
        "Error message: object 'prec' not found\n",
        "> ",
        "#install.packages(c(\"CoSMoS\", \"data.table\"))",
        "> ",
        "",
        "> ",
        "library(CoSMoS);",
        "> ",
        "library(data.table);",
        "> ",
        "library(ncdf4)",
        "> ",
        "library(zoo)",
        "> ",
        "library(extRemes)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "> ",
        "",
        "> ",
        "process_nc_files <- function(file_paths) {",
        "+ ",
        "  results_list <- list()  # Initialize an empty list to store results",
        "+ ",
        "",
        "+ ",
        "  for (file_path in file_paths) {",
        "+ ",
        "    tryCatch({",
        "+ ",
        "      nc_data <- nc_open(file_path)",
        "+ ",
        "",
        "+ ",
        "      # Read precipitation data and time",
        "+ ",
        "      precipitation <- ncvar_get(nc_data, \"pr\")",
        "+ ",
        "      time <- ncvar_get(nc_data, \"time\")",
        "+ ",
        "      time_units <- ncatt_get(nc_data, \"time\", \"units\")$value",
        "+ ",
        "      origin <- as.Date(sub(\"days since \", \"\", time_units))",
        "+ ",
        "      readable_dates <- origin + time",
        "+ ",
        "",
        "+ ",
        "      # Close the NetCDF file",
        "+ ",
        "      nc_close(nc_data)",
        "+ ",
        "",
        "+ ",
        "      # Data processing",
        "+ ",
        "      pr_agg <- apply(precipitation, MARGIN = c(3), FUN = mean, na.rm = TRUE)",
        "+ ",
        "      pr_agg_converted <- pr_agg * 3600  # Convert from kg/m²/s to mm/hr",
        "+ ",
        "      precip_date <- data.frame(date = time, val = pr_agg_converted, readable_dates = readable_dates)",
        "+ ",
        "",
        "+ ",
        "      # Store the data frames in the list",
        "+ ",
        "      results_list[[paste0(\"test_date_\", basename(file_path))]] <- precip_date",
        "+ ",
        "    }, error = function(e) {",
        "+ ",
        "      message(\"Error processing file: \", file_path)",
        "+ ",
        "      message(\"Error message: \", e$message)",
        "+ ",
        "    })",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  return(results_list)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "idf <- function(x, ",
        "+ ",
        "                rp = c(2, 5, 10, 25, 50, 100),",
        "+ ",
        "                dur = c(1, 2, 5, 10, 24, 48),",
        "+ ",
        "                aggfun = \"mean\",",
        "+ ",
        "                dist = \"gev\", ...) {",
        "+ ",
        "  ",
        "+ ",
        "  agg <- lapply(",
        "+ ",
        "    X = dur, ",
        "+ ",
        "    FUN = function(d) {",
        "+ ",
        "      ",
        "+ ",
        "      out <- x[, .(date = date,",
        "+ ",
        "                   val = do.call(what = paste0(\"froll\", aggfun),",
        "+ ",
        "                                 args = list(x = prec, ",
        "+ ",
        "                                             n = d, ",
        "+ ",
        "                                             align = \"center\",",
        "+ ",
        "                                             fill = 0)))]",
        "+ ",
        "      out",
        "+ ",
        "    }",
        "+ ",
        "  )",
        "+ ",
        "  ",
        "+ ",
        "  agg <- c(list(x), agg)",
        "+ ",
        "  ",
        "+ ",
        "  quant <- lapply(",
        "+ ",
        "    X = agg, ",
        "+ ",
        "    FUN = function(a) {",
        "+ ",
        "      ",
        "+ ",
        "      mx <- a[, .(mx = max(x = val, ",
        "+ ",
        "                           na.rm = TRUE)),",
        "+ ",
        "              by = year(x = date)]",
        "+ ",
        "      ",
        "+ ",
        "      para <- fitDist(data = mx$mx,",
        "+ ",
        "                      dist = dist,",
        "+ ",
        "                      n.points = 10,",
        "+ ",
        "                      norm = \"N4\",",
        "+ ",
        "                      constrain = FALSE)",
        "+ ",
        "      ",
        "+ ",
        "      prob <- 1 - 1/rp",
        "+ ",
        "      ",
        "+ ",
        "      q <- qgev(p = prob,",
        "+ ",
        "                loc = para$loc,",
        "+ ",
        "                scale = para$scale,",
        "+ ",
        "                shape = para$shape)",
        "+ ",
        "      ",
        "+ ",
        "      names(x = q) <- rp",
        "+ ",
        "      ",
        "+ ",
        "      as.list(x = q)",
        "+ ",
        "    }",
        "+ ",
        "  )",
        "+ ",
        "  ",
        "+ ",
        "  names(x = quant) <- c(1, dur)",
        "+ ",
        "  ",
        "+ ",
        "  quant_all <- rbindlist(l = quant, ",
        "+ ",
        "                         idcol = \"dur\")",
        "+ ",
        "  quant_idf <- melt(data = quant_all,",
        "+ ",
        "                    id.vars = \"dur\",",
        "+ ",
        "                    variable.name = \"rp\")",
        "+ ",
        "  ",
        "+ ",
        "  return(quant_idf)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "  # Adjust 'precip' to the actual column name",
        "> ",
        "#### create an IDF curve for",
        "> ",
        "#### 2, 5, 10, 25, 50, 100 year periods and",
        "> ",
        "#### 1, 2, 5, 10, 24, 48 hour duration",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# compute and plot idf for every element in the dataset",
        "> ",
        "create_and_save_idf_plots <- function(results_list) {",
        "+ ",
        "  for (i in seq_along(results_list)) {",
        "+ ",
        "    tryCatch({",
        "+ ",
        "      dta <- results_list[[i]]",
        "+ ",
        "      date <- substr(dta$readable_dates, 1, 4)",
        "+ ",
        "",
        "+ ",
        "      setDT(dta)",
        "+ ",
        "      dta$date <- as.POSIXct(dta$date, format = \"%Y-%m-%d %H:%M:%S\", origin = \"1970-01-01\", tz = \"UTC\")",
        "+ ",
        "      dta$val <- dta$val",
        "+ ",
        "",
        "+ ",
        "      test <- idf(x = dta)",
        "+ ",
        "",
        "+ ",
        "      p <- ggplot(data = test,",
        "+ ",
        "                  aes(x = as.numeric(dur), y = value, colour = rp)) +",
        "+ ",
        "        geom_line() +",
        "+ ",
        "        geom_point() +",
        "+ ",
        "        scale_colour_manual(name = \"Return\\nperiod\",",
        "+ ",
        "                            values = c(\"yellow4\", \"steelblue\", \"red4\",",
        "+ ",
        "                                       \"darkgreen\", \"pink\", \"magenta4\")) +",
        "+ ",
        "        labs(x = \"Duration (hours)\",",
        "+ ",
        "             y = \"Intensity (mm/h)\",",
        "+ ",
        "             title = paste(\"IDF curve for\", date)) +",
        "+ ",
        "        theme_bw()",
        "+ ",
        "",
        "+ ",
        "      # Save the plot with the date in the filename",
        "+ ",
        "      ggsave(filename = paste0(\"IDF_plot_\", date, \".png\"), plot = p, width = 10, height = 8)",
        "+ ",
        "    }, error = function(e) {",
        "+ ",
        "      message(\"Error processing file: \", file_paths[i])",
        "+ ",
        "      message(\"Error message: \", e$message)",
        "+ ",
        "    })",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Usage of the function",
        "> ",
        "# main",
        "> ",
        "",
        "> ",
        "file_paths <- list.files(\"C:/Users/Ognjen/Documents/data/adv_r_data_test\",",
        "+ ",
        "                         pattern = \"\\\\.nc$\", full.names = TRUE)",
        "> ",
        "results_list <- process_nc_files(file_paths)",
        "> ",
        "create_and_save_idf_plots(results_list)",
        "Error processing file: C:/Users/Ognjen/Documents/data/adv_r_data_test/CZ_pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_CNRM-ALADIN63_v2_1hr_195101010030-195112312330.nc\n",
        "Error message: object 'prec' not found\n",
        "Error processing file: C:/Users/Ognjen/Documents/data/adv_r_data_test/CZ_pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_CNRM-ALADIN63_v2_1hr_195201010030-195212312330.nc\n",
        "Error message: object 'prec' not found\n",
        "> ",
        "#install.packages(c(\"CoSMoS\", \"data.table\"))",
        "> ",
        "",
        "> ",
        "library(CoSMoS);",
        "> ",
        "library(data.table);",
        "> ",
        "library(ncdf4)",
        "> ",
        "library(zoo)",
        "> ",
        "library(extRemes)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "> ",
        "",
        "> ",
        "process_nc_files <- function(file_paths) {",
        "+ ",
        "  results_list <- list()  # Initialize an empty list to store results",
        "+ ",
        "",
        "+ ",
        "  for (file_path in file_paths) {",
        "+ ",
        "    tryCatch({",
        "+ ",
        "      nc_data <- nc_open(file_path)",
        "+ ",
        "",
        "+ ",
        "      # Read precipitation data and time",
        "+ ",
        "      precipitation <- ncvar_get(nc_data, \"pr\")",
        "+ ",
        "      time <- ncvar_get(nc_data, \"time\")",
        "+ ",
        "      time_units <- ncatt_get(nc_data, \"time\", \"units\")$value",
        "+ ",
        "      origin <- as.Date(sub(\"days since \", \"\", time_units))",
        "+ ",
        "      readable_dates <- origin + time",
        "+ ",
        "",
        "+ ",
        "      # Close the NetCDF file",
        "+ ",
        "      nc_close(nc_data)",
        "+ ",
        "",
        "+ ",
        "      # Data processing",
        "+ ",
        "      pr_agg <- apply(precipitation, MARGIN = c(3), FUN = mean, na.rm = TRUE)",
        "+ ",
        "      pr_agg_converted <- pr_agg * 3600  # Convert from kg/m²/s to mm/hr",
        "+ ",
        "      precip_date <- data.frame(date = time, val = pr_agg_converted, readable_dates = readable_dates)",
        "+ ",
        "",
        "+ ",
        "      # Store the data frames in the list",
        "+ ",
        "      results_list[[paste0(\"test_date_\", basename(file_path))]] <- precip_date",
        "+ ",
        "    }, error = function(e) {",
        "+ ",
        "      message(\"Error processing file: \", file_path)",
        "+ ",
        "      message(\"Error message: \", e$message)",
        "+ ",
        "    })",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  return(results_list)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "idf <- function(x,",
        "+ ",
        "                rp = c(2, 5, 10, 25, 50, 100),",
        "+ ",
        "                dur = c(1, 2, 5, 10, 24, 48),",
        "+ ",
        "                aggfun = \"mean\",",
        "+ ",
        "                dist = \"gev\", ...) {",
        "+ ",
        "",
        "+ ",
        "  agg <- lapply(",
        "+ ",
        "    X = dur,",
        "+ ",
        "    FUN = function(d) {",
        "+ ",
        "",
        "+ ",
        "      out <- x[, .(date = date,",
        "+ ",
        "                   val = do.call(what = paste0(\"froll\", aggfun),",
        "+ ",
        "                                 args = list(x = val,",
        "+ ",
        "                                             n = d,",
        "+ ",
        "                                             align = \"center\",",
        "+ ",
        "                                             fill = 0)))]",
        "+ ",
        "      out",
        "+ ",
        "    }",
        "+ ",
        "  )",
        "+ ",
        "",
        "+ ",
        "  agg <- c(list(x), agg)",
        "+ ",
        "",
        "+ ",
        "  quant <- lapply(",
        "+ ",
        "    X = agg,",
        "+ ",
        "    FUN = function(a) {",
        "+ ",
        "",
        "+ ",
        "      mx <- a[, .(mx = max(x = val,",
        "+ ",
        "                           na.rm = TRUE)),",
        "+ ",
        "              by = year(x = date)]",
        "+ ",
        "",
        "+ ",
        "      para <- fitDist(data = mx$mx,",
        "+ ",
        "                      dist = dist,",
        "+ ",
        "                      n.points = 10,",
        "+ ",
        "                      norm = \"N4\",",
        "+ ",
        "                      constrain = FALSE)",
        "+ ",
        "",
        "+ ",
        "      prob <- 1 - 1/rp",
        "+ ",
        "",
        "+ ",
        "      q <- qgev(p = prob,",
        "+ ",
        "                loc = para$loc,",
        "+ ",
        "                scale = para$scale,",
        "+ ",
        "                shape = para$shape)",
        "+ ",
        "",
        "+ ",
        "      names(x = q) <- rp",
        "+ ",
        "",
        "+ ",
        "      as.list(x = q)",
        "+ ",
        "    }",
        "+ ",
        "  )",
        "+ ",
        "",
        "+ ",
        "  names(x = quant) <- c(1, dur)",
        "+ ",
        "",
        "+ ",
        "  quant_all <- rbindlist(l = quant,",
        "+ ",
        "                         idcol = \"dur\")",
        "+ ",
        "  quant_idf <- melt(data = quant_all,",
        "+ ",
        "                    id.vars = \"dur\",",
        "+ ",
        "                    variable.name = \"rp\")",
        "+ ",
        "",
        "+ ",
        "  return(quant_idf)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "  # Adjust 'precip' to the actual column name",
        "> ",
        "#### create an IDF curve for",
        "> ",
        "#### 2, 5, 10, 25, 50, 100 year periods and",
        "> ",
        "#### 1, 2, 5, 10, 24, 48 hour duration",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# compute and plot idf for every element in the dataset",
        "> ",
        "create_and_save_idf_plots <- function(results_list) {",
        "+ ",
        "  for (i in seq_along(results_list)) {",
        "+ ",
        "    tryCatch({",
        "+ ",
        "      dta <- results_list[[i]]",
        "+ ",
        "      date <- substr(dta$readable_dates, 1, 4)",
        "+ ",
        "",
        "+ ",
        "      setDT(dta)",
        "+ ",
        "      dta$date <- as.POSIXct(dta$date, format = \"%Y-%m-%d %H:%M:%S\", origin = \"1970-01-01\", tz = \"UTC\")",
        "+ ",
        "      dta$val <- dta$val",
        "+ ",
        "",
        "+ ",
        "      test <- idf(x = dta)",
        "+ ",
        "",
        "+ ",
        "      p <- ggplot(data = test,",
        "+ ",
        "                  aes(x = as.numeric(dur), y = value, colour = rp)) +",
        "+ ",
        "        geom_line() +",
        "+ ",
        "        geom_point() +",
        "+ ",
        "        scale_colour_manual(name = \"Return\\nperiod\",",
        "+ ",
        "                            values = c(\"yellow4\", \"steelblue\", \"red4\",",
        "+ ",
        "                                       \"darkgreen\", \"pink\", \"magenta4\")) +",
        "+ ",
        "        labs(x = \"Duration (hours)\",",
        "+ ",
        "             y = \"Intensity (mm/h)\",",
        "+ ",
        "             title = paste(\"IDF curve for\", date)) +",
        "+ ",
        "        theme_bw()",
        "+ ",
        "",
        "+ ",
        "      # Save the plot with the date in the filename",
        "+ ",
        "      ggsave(filename = paste0(\"IDF_plot_\", date, \".png\"), plot = p, width = 10, height = 8)",
        "+ ",
        "    }, error = function(e) {",
        "+ ",
        "      message(\"Error processing file: \", file_paths[i])",
        "+ ",
        "      message(\"Error message: \", e$message)",
        "+ ",
        "    })",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Usage of the function",
        "> ",
        "# main",
        "> ",
        "",
        "> ",
        "file_paths <- list.files(\"C:/Users/Ognjen/Documents/data/adv_r_data_test\",",
        "+ ",
        "                         pattern = \"\\\\.nc$\", full.names = TRUE)",
        "> ",
        "results_list <- process_nc_files(file_paths)",
        "> ",
        "create_and_save_idf_plots(results_list)",
        "Warning messages:\n",
        "1: \u001B[38;5;232m`filename` must have length 1, not length 8760.\n\u001B[33m!\u001B[38;5;232m Only the first, \u001B]8;;file://C:/Users/Ognjen/Documents/idfPackage/IDF_plot_1951.png\u0007\u001B[34mIDF_plot_1951.png\u001B[38;5;232m\u001B]8;;\u0007, will be used.\u001B[39m \n",
        "2: \u001B[38;5;232m`filename` must have length 1, not length 8784.\n\u001B[33m!\u001B[38;5;232m Only the first, \u001B]8;;file://C:/Users/Ognjen/Documents/idfPackage/IDF_plot_1952.png\u0007\u001B[34mIDF_plot_1952.png\u001B[38;5;232m\u001B]8;;\u0007, will be used.\u001B[39m \n",
        "> ",
        "#install.packages(c(\"CoSMoS\", \"data.table\"))",
        "> ",
        "",
        "> ",
        "library(CoSMoS);",
        "> ",
        "library(data.table);",
        "> ",
        "library(ncdf4)",
        "> ",
        "library(zoo)",
        "> ",
        "library(extRemes)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "> ",
        "",
        "> ",
        "process_nc_files <- function(file_paths) {",
        "+ ",
        "  results_list <- list()  # Initialize an empty list to store results",
        "+ ",
        "",
        "+ ",
        "  for (file_path in file_paths) {",
        "+ ",
        "    tryCatch({",
        "+ ",
        "      nc_data <- nc_open(file_path)",
        "+ ",
        "",
        "+ ",
        "      # Read precipitation data and time",
        "+ ",
        "      precipitation <- ncvar_get(nc_data, \"pr\")",
        "+ ",
        "      time <- ncvar_get(nc_data, \"time\")",
        "+ ",
        "      time_units <- ncatt_get(nc_data, \"time\", \"units\")$value",
        "+ ",
        "      origin <- as.Date(sub(\"days since \", \"\", time_units))",
        "+ ",
        "      readable_dates <- origin + time",
        "+ ",
        "",
        "+ ",
        "      # Close the NetCDF file",
        "+ ",
        "      nc_close(nc_data)",
        "+ ",
        "",
        "+ ",
        "      # Data processing",
        "+ ",
        "      pr_agg <- apply(precipitation, MARGIN = c(3), FUN = mean, na.rm = TRUE)",
        "+ ",
        "      pr_agg_converted <- pr_agg * 3600  # Convert from kg/m²/s to mm/hr",
        "+ ",
        "      precip_date <- data.frame(date = time, val = pr_agg_converted, readable_dates = readable_dates)",
        "+ ",
        "",
        "+ ",
        "      # Store the data frames in the list",
        "+ ",
        "      results_list[[paste0(\"test_date_\", basename(file_path))]] <- precip_date",
        "+ ",
        "    }, error = function(e) {",
        "+ ",
        "      message(\"Error processing file: \", file_path)",
        "+ ",
        "      message(\"Error message: \", e$message)",
        "+ ",
        "    })",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  return(results_list)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "idf <- function(x,",
        "+ ",
        "                rp = c(2, 5, 10, 25, 50, 100),",
        "+ ",
        "                dur = c(1, 2, 5, 10, 24, 48),",
        "+ ",
        "                aggfun = \"mean\",",
        "+ ",
        "                dist = \"gev\", ...) {",
        "+ ",
        "  setDT(x)",
        "+ ",
        "  val_vector <-x$val",
        "+ ",
        "  agg <- lapply(",
        "+ ",
        "    X = dur,",
        "+ ",
        "    FUN = function(d) {",
        "+ ",
        "      val_col <- x$val",
        "+ ",
        "      rolling_output <- do.call(what = paste0(\"froll\", aggfun),",
        "+ ",
        "                                args = list(x = val_vector, n = d, align = \"center\", fill =0))",
        "+ ",
        "",
        "+ ",
        "      # Create the output data.table",
        "+ ",
        "      out <- data.table(date = x$date, val = rolling_output)",
        "+ ",
        "      return(out)",
        "+ ",
        "    }",
        "+ ",
        "  )",
        "+ ",
        "",
        "+ ",
        "agg <- lapply(agg, setDT)",
        "+ ",
        "",
        "+ ",
        "  quant <- lapply(",
        "+ ",
        "    X = agg,",
        "+ ",
        "    FUN = function(a) {",
        "+ ",
        "",
        "+ ",
        "      mx <- a[, .(mx = max(x = val,",
        "+ ",
        "                           na.rm = TRUE)),",
        "+ ",
        "              by = .(year(date))]",
        "+ ",
        "",
        "+ ",
        "      para <- fitDist(data = mx$mx,",
        "+ ",
        "                      dist = dist,",
        "+ ",
        "                      n.points = 10,",
        "+ ",
        "                      norm = \"N4\",",
        "+ ",
        "                      constrain = FALSE)",
        "+ ",
        "",
        "+ ",
        "      prob <- 1 - 1/rp",
        "+ ",
        "",
        "+ ",
        "      q <- qgev(p = prob,",
        "+ ",
        "                loc = para$loc,",
        "+ ",
        "                scale = para$scale,",
        "+ ",
        "                shape = para$shape)",
        "+ ",
        "",
        "+ ",
        "      names(x = q) <- rp",
        "+ ",
        "",
        "+ ",
        "      as.list(x = q)",
        "+ ",
        "    }",
        "+ ",
        "  )",
        "+ ",
        "",
        "+ ",
        "  names(x = quant) <- c(1, dur)",
        "+ ",
        "",
        "+ ",
        "  quant_all <- rbindlist(l = quant,",
        "+ ",
        "                         idcol = \"dur\")",
        "+ ",
        "  quant_idf <- melt(data = quant_all,",
        "+ ",
        "                    id.vars = \"dur\",",
        "+ ",
        "                    variable.name = \"rp\")",
        "+ ",
        "",
        "+ ",
        "  return(quant_idf)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "  # Adjust 'precip' to the actual column name",
        "> ",
        "#### create an IDF curve for",
        "> ",
        "#### 2, 5, 10, 25, 50, 100 year periods and",
        "> ",
        "#### 1, 2, 5, 10, 24, 48 hour duration",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# compute and plot idf for every element in the dataset",
        "> ",
        "create_and_save_idf_plots <- function(results_list) {",
        "+ ",
        "  for (i in seq_along(results_list)) {",
        "+ ",
        "    tryCatch({",
        "+ ",
        "      dta <- results_list[[i]]",
        "+ ",
        "      date <- substr(dta$readable_dates, 1, 4)",
        "+ ",
        "",
        "+ ",
        "      setDT(dta)",
        "+ ",
        "      dta$date <- as.POSIXct(dta$date, format = \"%Y-%m-%d %H:%M:%S\", origin = \"1970-01-01\", tz = \"UTC\")",
        "+ ",
        "      dta$val <- dta$val",
        "+ ",
        "",
        "+ ",
        "      test <- idf(x = dta)",
        "+ ",
        "",
        "+ ",
        "      p <- ggplot(data = test,",
        "+ ",
        "                  aes(x = as.numeric(dur), y = value, colour = rp)) +",
        "+ ",
        "        geom_line() +",
        "+ ",
        "        geom_point() +",
        "+ ",
        "        scale_colour_manual(name = \"Return\\nperiod\",",
        "+ ",
        "                            values = c(\"yellow4\", \"steelblue\", \"red4\",",
        "+ ",
        "                                       \"darkgreen\", \"pink\", \"magenta4\")) +",
        "+ ",
        "        labs(x = \"Duration (hours)\",",
        "+ ",
        "             y = \"Intensity (mm/h)\",",
        "+ ",
        "             title = paste(\"IDF curve for\", date)) +",
        "+ ",
        "        theme_bw()",
        "+ ",
        "",
        "+ ",
        "      # Save the plot with the date in the filename",
        "+ ",
        "      ggsave(filename = paste0(\"IDF_plot_\", date, \".png\"), plot = p, width = 10, height = 8)",
        "+ ",
        "    }, error = function(e) {",
        "+ ",
        "      message(\"Error processing file: \", file_paths[i])",
        "+ ",
        "      message(\"Error message: \", e$message)",
        "+ ",
        "    })",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Usage of the function",
        "> ",
        "# main",
        "> ",
        "",
        "> ",
        "file_paths <- list.files(\"C:/Users/Ognjen/Documents/data/adv_r_data_test\",",
        "+ ",
        "                         pattern = \"\\\\.nc$\", full.names = TRUE)",
        "> ",
        "results_list <- process_nc_files(file_paths)",
        "> ",
        "create_and_save_idf_plots(results_list)",
        "Error processing file: C:/Users/Ognjen/Documents/data/adv_r_data_test/CZ_pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_CNRM-ALADIN63_v2_1hr_195101010030-195112312330.nc\n",
        "Error message: 'names' attribute [7] must be the same length as the vector [6]\n",
        "Error processing file: C:/Users/Ognjen/Documents/data/adv_r_data_test/CZ_pr_EUR-11_CNRM-CERFACS-CNRM-CM5_historical_r1i1p1_CNRM-ALADIN63_v2_1hr_195201010030-195212312330.nc\n",
        "Error message: 'names' attribute [7] must be the same length as the vector [6]\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "devtools::build*()",
        "Error: unexpected ')' in \"devtools::build*()\"\n",
        "> ",
        "devtools::build()",
        "\u001B[36m──\u001B[39m \u001B[36mR CMD build\u001B[39m \u001B[36m─────────────────────────────────────────────────────────────────────────────────\u001B[39m\n  \r  \r  \r   checking for file 'C:\\Users\\Ognjen\\Documents\\idfPackage/DESCRIPTION' ...\r  \r   checking for file 'C:\\Users\\Ognjen\\Documents\\idfPackage/DESCRIPTION' ... \r  \r\u001B[32m✔\u001B[39m  \u001B[38;5;247mchecking for file 'C:\\Users\\Ognjen\\Documents\\idfPackage/DESCRIPTION'\u001B[39m\u001B[36m\u001B[36m (422ms)\u001B[36m\u001B[39m",
        "\n\r  \r  \r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mpreparing 'idfPackage':\u001B[39m\u001B[36m\u001B[39m\n   checking DESCRIPTION meta-information ...\r  \r\u001B[32m✔\u001B[39m  \u001B[38;5;247mchecking DESCRIPTION meta-information\u001B[39m\u001B[36m\u001B[39m\n\r  \r  \r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mchecking for LF line-endings in source and make files and shell scripts\u001B[39m\u001B[36m\u001B[39m\n\r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mchecking for empty or unneeded directories\u001B[39m\u001B[36m\u001B[39m\n   Removed empty directory 'idfPackage/man'",
        "\n   Omitted 'LazyData' from DESCRIPTION\n\r  \r  \r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mbuilding 'idfPackage_0.1.0.tar.gz'\u001B[39m\u001B[36m\u001B[39m\n\r  \r   \n\r[1] \"C:/Users/Ognjen/Documents/idfPackage_0.1.0.tar.gz\"\n",
        "> ",
        "install.packages(\"devtools\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "library(devtools)",
        "Loading required package: usethis\n",
        "\nAttaching package: ‘devtools’\n\n",
        "The following object is masked from ‘package:testthat’:\n\n    test_file\n\n",
        "Warning messages:\n",
        "1: package ‘devtools’ was built under R version 4.2.3 \n",
        "2: package ‘usethis’ was built under R version 4.2.3 \n",
        "> ",
        "install()",
        "These packages have more recent versions available.\nIt is recommended to update all of them.\nWhich would you like to update?\n\n 1: All                                           \n 2: CRAN packages only                            \n 3: None                                          \n 4: withr        (2.5.0      -> 3.0.0     ) [CRAN]\n 5: lifecycle    (1.0.3      -> 1.0.4     ) [CRAN]\n 6: glue         (1.6.2      -> 1.7.0     ) [CRAN]\n 7: cli          (3.5.0      -> 3.6.2     ) [CRAN]\n 8: utf8         (1.2.2      -> 1.2.4     ) [CRAN]",
        "\n 9: fansi        (1.0.3      -> 1.0.6     ) [CRAN]\n10: viridisLite  (0.4.1      -> 0.4.2     ) [CRAN]\n11: labeling     (0.4.2      -> 0.4.3     ) [CRAN]\n12: RcppArmad... (0.12.2.0.0 -> 0.12.6.6.1) [CRAN]\n13: Rcpp         (1.0.9      -> 1.0.12    ) [CRAN]\n14: scales       (1.2.1      -> 1.3.0     ) [CRAN]\n15: gtable       (0.3.1      -> 0.3.4     ) [CRAN]\n16: ggplot2      (3.4.1      -> 3.4.4     ) [CRAN]\n17: curl         (5.0.0      -> 5.2.0     ) [CRAN]\n18: rprojroot    (2.0.3      -> 2.0.4     ) [CRAN]\n19: pkgbuild     (1.4.0      -> 1.4.3     ) [CRAN]",
        "\n20: fs           (1.6.1      -> 1.6.3     ) [CRAN]\n21: waldo        (0.4.0      -> 0.5.2     ) [CRAN]\n22: ps           (1.7.5      -> 1.7.6     ) [CRAN]\n23: processx     (3.8.1      -> 3.8.3     ) [CRAN]\n24: pkgload      (1.3.2      -> 1.3.4     ) [CRAN]\n25: jsonlite     (1.8.4      -> 1.8.8     ) [CRAN]\n26: evaluate     (0.20       -> 0.23      ) [CRAN]\n27: digest       (0.6.31     -> 0.6.34    ) [CRAN]\n28: desc         (1.4.2      -> 1.4.3     ) [CRAN]\n29: brio         (1.1.3      -> 1.1.4     ) [CRAN]\n30: testthat     (3.1.7      -> 3.2.1     ) [CRAN]",
        "\n\n",
        "Enter one or more numbers, or an empty line to skip updates: ",
        "library(idfPackage)",
        "Enter one or more numbers, or an empty line to skip updates: ",
        "",
        "\u001B[36m──\u001B[39m \u001B[36mR CMD build\u001B[39m \u001B[36m─────────────────────────────────────────────────────────────────────────────────\u001B[39m\n  \r  \r  \r   checking for file 'C:\\Users\\Ognjen\\Documents\\idfPackage/DESCRIPTION' ...\r  \r\u001B[32m✔\u001B[39m  \u001B[38;5;247mchecking for file 'C:\\Users\\Ognjen\\Documents\\idfPackage/DESCRIPTION'\u001B[39m\u001B[36m\u001B[36m (374ms)\u001B[36m\u001B[39m\n\r  \r",
        "  \r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mpreparing 'idfPackage':\u001B[39m\u001B[36m\u001B[39m\n   checking DESCRIPTION meta-information ...\r  \r\u001B[32m✔\u001B[39m  \u001B[38;5;247mchecking DESCRIPTION meta-information\u001B[39m\u001B[36m\u001B[39m\n\r  \r  \r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mchecking for LF line-endings in source and make files and shell scripts\u001B[39m\u001B[36m\u001B[39m\n\r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mchecking for empty or unneeded directories\u001B[39m\u001B[36m\u001B[39m\n   Removed empty directory 'idfPackage/man'",
        "\n   Omitted 'LazyData' from DESCRIPTION\n\r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mbuilding 'idfPackage_0.1.0.tar.gz'\u001B[39m\u001B[36m\u001B[39m\n\r  \r   \n\rRunning \"C:/PROGRA~1/R/R-42~1.1/bin/x64/Rcmd.exe\" INSTALL \\\n  \"C:\\Users\\Ognjen\\AppData\\Local\\Temp\\RtmpEz1RgA/idfPackage_0.1.0.tar.gz\" --install-tests \n* installing to library 'C:/Users/Ognjen/AppData/Local/R/win-library/4.2'\r\n* installing *source* package 'idfPackage' ...\r\n** using staged installation\r\n** R\r\n** byte-compile and prepare package for lazy loading\r\n",
        "\nRestarting R session...\n\n"
    ]
}