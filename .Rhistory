values = c("yellow4", "steelblue", "red4", "darkgreen", "pink", "magenta4")) +
ggplot2::labs(x = "Duration (hours)", y = "Intensity (mm/h)", title = paste("IDF curve for year ", i)) +
ggplot2::theme_bw()
# Save the plot
ggplot2::ggsave(filename = paste0("IDF_plot_year_", date(), ".png"), plot = p, width = 10, height = 8)
}, error = function(e) {
message("Error processing data at index: ", i)
message("Error message: ", e$message)
})
}
}
# Usage of the function
# main
file_paths <- list.files("C:/Users/Ognjen/Documents/data/adv_r_data_test",
pattern = "\\.nc$", full.names = TRUE)
# Prompt the user to enter the file path
#path_input <- readline(prompt = "Enter the path to the data directory: ")
#file_paths <- list.files(path = path_input, pattern = "\\.nc$", full.names = TRUE)
results_list <- process_nc_files(file_paths)
create_and_save_idf_plots(results_list)
#install.packages(c("CoSMoS", "data.table"))
library(CoSMoS);
library(data.table);
library(ncdf4)
library(zoo)
library(extRemes)
library(ggplot2)
library(dplyr)
process_nc_files <- function(file_paths) {
results_list <- list()  # Initialize an empty list to store results
for (file_path in file_paths) {
tryCatch({
nc_data <- nc_open(file_path)
# Read precipitation data and time
precipitation <- ncvar_get(nc_data, "pr")
time <- ncvar_get(nc_data, "time")
time_units <- ncatt_get(nc_data, "time", "units")$value
origin <- as.Date(sub("days since ", "", time_units))
readable_dates <- origin + time
# Close the NetCDF file
nc_close(nc_data)
# Data processing
pr_agg <- apply(precipitation, MARGIN = c(3), FUN = mean, na.rm = TRUE)
pr_agg_converted <- pr_agg * 3600  # Convert from kg/m²/s to mm/hr
precip_date <- data.frame(date = time, val = pr_agg_converted, readable_dates = readable_dates)
# Store the data frames in the list
results_list[[paste0("test_date_", basename(file_path))]] <- precip_date
}, error = function(e) {
message("Error processing file: ", file_path)
message("Error message: ", e$message)
})
}
return(results_list)
}
idf <- function(x,
rp = c(2, 5, 10, 25, 50, 100),
dur = c(1, 2, 5, 10, 24, 48),
aggfun = "mean",
dist = "gev", ...) {
agg <- lapply(
X = dur,
FUN = function(d) {
out <- x[, .(date = date,
val = do.call(what = paste0("froll", aggfun),
args = list(x = val,
n = d,
align = "center",
fill = 0)))]
out
}
)
agg <- c(list(x), agg)
quant <- lapply(
X = agg,
FUN = function(a) {
mx <- a[, .(mx = max(x = val,
na.rm = TRUE)),
by = year(x = date)]
para <- fitDist(data = mx$mx,
dist = dist,
n.points = 10,
norm = "N4",
constrain = FALSE)
prob <- 1 - 1/rp
q <- qgev(p = prob,
loc = para$loc,
scale = para$scale,
shape = para$shape)
names(x = q) <- rp
as.list(x = q)
}
)
names(x = quant) <- c(1, dur)
quant_all <- rbindlist(l = quant,
idcol = "dur")
quant_idf <- melt(data = quant_all,
id.vars = "dur",
variable.name = "rp")
return(quant_idf)
}
# Adjust 'precip' to the actual column name
#### create an IDF curve for
#### 2, 5, 10, 25, 50, 100 year periods and
#### 1, 2, 5, 10, 24, 48 hour duration
# compute and plot idf for every element in the dataset
create_and_save_idf_plots <- function(results_list) {
for (i in seq_along(results_list)) {
tryCatch({
dta <- results_list[[i]]
# Ensure 'date' and 'val' columns are present
if (!"date" %in% names(dta) || !"val" %in% names(dta)) {
stop("Data frame must contain 'date' and 'val' columns.")
}
# Convert to data.table, if not already
if (!data.table::is.data.table(dta)) {
data.table::setDT(dta)
}
# Process the date column
dta[, date := as.POSIXct(date, origin = "1970-01-01", tz = "UTC")]
# Calculate IDF
test <- idf(x = dta)
# Generate plot
p <- ggplot2::ggplot(data = test, ggplot2::aes(x = as.numeric(dur), y = value, colour = rp)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_colour_manual(name = "Return\nperiod",
values = c("yellow4", "steelblue", "red4", "darkgreen", "pink", "magenta4")) +
ggplot2::labs(x = "Duration (hours)", y = "Intensity (mm/h)", title = paste("IDF curve for year ", i)) +
ggplot2::theme_bw()
# Save the plot
ggplot2::ggsave(filename = paste0("IDF_plot_year_", date(), ".png"), plot = p, width = 10, height = 8)
}, error = function(e) {
message("Error processing data at index: ", i)
message("Error message: ", e$message)
})
}
}
# Usage of the function
# main
file_paths <- list.files("C:/Users/Ognjen/Documents/data/adv_r_data_test",
pattern = "\\.nc$", full.names = TRUE)
# Prompt the user to enter the file path
#path_input <- readline(prompt = "Enter the path to the data directory: ")
#file_paths <- list.files(path = path_input, pattern = "\\.nc$", full.names = TRUE)
results_list <- process_nc_files(file_paths)
create_and_save_idf_plots(results_list)
#install.packages(c("CoSMoS", "data.table"))
library(CoSMoS);
library(data.table);
library(ncdf4)
library(zoo)
library(extRemes)
library(ggplot2)
library(dplyr)
process_nc_files <- function(file_paths) {
results_list <- list()  # Initialize an empty list to store results
for (file_path in file_paths) {
tryCatch({
nc_data <- nc_open(file_path)
# Read precipitation data and time
precipitation <- ncvar_get(nc_data, "pr")
time <- ncvar_get(nc_data, "time")
time_units <- ncatt_get(nc_data, "time", "units")$value
origin <- as.Date(sub("days since ", "", time_units))
readable_dates <- origin + time
# Close the NetCDF file
nc_close(nc_data)
# Data processing
pr_agg <- apply(precipitation, MARGIN = c(3), FUN = mean, na.rm = TRUE)
pr_agg_converted <- pr_agg * 3600  # Convert from kg/m²/s to mm/hr
precip_date <- data.frame(date = time, val = pr_agg_converted, readable_dates = readable_dates)
# Store the data frames in the list
results_list[[paste0("test_date_", basename(file_path))]] <- precip_date
}, error = function(e) {
message("Error processing file: ", file_path)
message("Error message: ", e$message)
})
}
return(results_list)
}
idf <- function(x,
rp = c(2, 5, 10, 25, 50, 100),
dur = c(1, 2, 5, 10, 24, 48),
aggfun = "mean",
dist = "gev", ...) {
agg <- lapply(
X = dur,
FUN = function(d) {
out <- x[, .(date = date,
val = do.call(what = paste0("froll", aggfun),
args = list(x = val,
n = d,
align = "center",
fill = 0)))]
out
}
)
agg <- c(list(x), agg)
quant <- lapply(
X = agg,
FUN = function(a) {
mx <- a[, .(mx = max(x = val,
na.rm = TRUE)),
by = year(x = date)]
para <- fitDist(data = mx$mx,
dist = dist,
n.points = 10,
norm = "N4",
constrain = FALSE)
prob <- 1 - 1/rp
q <- qgev(p = prob,
loc = para$loc,
scale = para$scale,
shape = para$shape)
names(x = q) <- rp
as.list(x = q)
}
)
names(x = quant) <- c(1, dur)
quant_all <- rbindlist(l = quant,
idcol = "dur")
quant_idf <- melt(data = quant_all,
id.vars = "dur",
variable.name = "rp")
return(quant_idf)
}
# Adjust 'precip' to the actual column name
#### create an IDF curve for
#### 2, 5, 10, 25, 50, 100 year periods and
#### 1, 2, 5, 10, 24, 48 hour duration
# compute and plot idf for every element in the dataset
create_and_save_idf_plots <- function(results_list) {
for (i in seq_along(results_list)) {
tryCatch({
dta <- results_list[[i]]
date <- substr(dta$readable_dates, 1, 4)
# Ensure 'date' and 'val' columns are present
if (!"date" %in% names(dta) || !"val" %in% names(dta)) {
stop("Data frame must contain 'date' and 'val' columns.")
}
# Convert to data.table, if not already
if (!data.table::is.data.table(dta)) {
data.table::setDT(dta)
}
# Process the date column
dta[, date := as.POSIXct(date, origin = "1970-01-01", tz = "UTC")]
# Calculate IDF
test <- idf(x = dta)
# Generate plot
p <- ggplot2::ggplot(data = test, ggplot2::aes(x = as.numeric(dur), y = value, colour = rp)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_colour_manual(name = "Return\nperiod",
values = c("yellow4", "steelblue", "red4", "darkgreen", "pink", "magenta4")) +
ggplot2::labs(x = "Duration (hours)", y = "Intensity (mm/h)", title = paste("IDF curve for year ", date) +
ggplot2::theme_bw()
# Save the plot
ggplot2::ggsave(filename = paste0("IDF_plot_year_", date, ".png"), plot = p, width = 10, height = 8)
#install.packages(c("CoSMoS", "data.table"))
library(CoSMoS);
library(data.table);
library(ncdf4)
library(zoo)
library(extRemes)
library(ggplot2)
library(dplyr)
process_nc_files <- function(file_paths) {
results_list <- list()  # Initialize an empty list to store results
for (file_path in file_paths) {
tryCatch({
nc_data <- nc_open(file_path)
# Read precipitation data and time
precipitation <- ncvar_get(nc_data, "pr")
time <- ncvar_get(nc_data, "time")
time_units <- ncatt_get(nc_data, "time", "units")$value
origin <- as.Date(sub("days since ", "", time_units))
readable_dates <- origin + time
# Close the NetCDF file
nc_close(nc_data)
# Data processing
pr_agg <- apply(precipitation, MARGIN = c(3), FUN = mean, na.rm = TRUE)
pr_agg_converted <- pr_agg * 3600  # Convert from kg/m²/s to mm/hr
precip_date <- data.frame(date = time, val = pr_agg_converted, readable_dates = readable_dates)
# Store the data frames in the list
results_list[[paste0("test_date_", basename(file_path))]] <- precip_date
}, error = function(e) {
message("Error processing file: ", file_path)
message("Error message: ", e$message)
})
}
return(results_list)
}
idf <- function(x,
rp = c(2, 5, 10, 25, 50, 100),
dur = c(1, 2, 5, 10, 24, 48),
aggfun = "mean",
dist = "gev", ...) {
agg <- lapply(
X = dur,
FUN = function(d) {
out <- x[, .(date = date,
val = do.call(what = paste0("froll", aggfun),
args = list(x = val,
n = d,
align = "center",
fill = 0)))]
out
}
)
agg <- c(list(x), agg)
quant <- lapply(
X = agg,
FUN = function(a) {
mx <- a[, .(mx = max(x = val,
na.rm = TRUE)),
by = year(x = date)]
para <- fitDist(data = mx$mx,
dist = dist,
n.points = 10,
norm = "N4",
constrain = FALSE)
prob <- 1 - 1/rp
q <- qgev(p = prob,
loc = para$loc,
scale = para$scale,
shape = para$shape)
names(x = q) <- rp
as.list(x = q)
}
)
names(x = quant) <- c(1, dur)
quant_all <- rbindlist(l = quant,
idcol = "dur")
quant_idf <- melt(data = quant_all,
id.vars = "dur",
variable.name = "rp")
return(quant_idf)
}
# Adjust 'precip' to the actual column name
#### create an IDF curve for
#### 2, 5, 10, 25, 50, 100 year periods and
#### 1, 2, 5, 10, 24, 48 hour duration
# compute and plot idf for every element in the dataset
create_and_save_idf_plots <- function(results_list) {
for (i in seq_along(results_list)) {
tryCatch({
dta <- results_list[[i]]
date <- substr(dta$readable_dates, 1, 4)
# Ensure 'date' and 'val' columns are present
if (!"date" %in% names(dta) || !"val" %in% names(dta)) {
stop("Data frame must contain 'date' and 'val' columns.")
}
# Convert to data.table, if not already
if (!data.table::is.data.table(dta)) {
data.table::setDT(dta)
}
# Process the date column
dta[, date := as.POSIXct(date, origin = "1970-01-01", tz = "UTC")]
# Calculate IDF
test <- idf(x = dta)
# Generate plot
p <- ggplot2::ggplot(data = test, ggplot2::aes(x = as.numeric(dur), y = value, colour = rp)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_colour_manual(name = "Return\nperiod",
values = c("yellow4", "steelblue", "red4", "darkgreen", "pink", "magenta4")) +
ggplot2::labs(x = "Duration (hours)", y = "Intensity (mm/h)", title = paste("IDF curve for year ", date <- substr(dta$readable_dates, 1, 4))) +
ggplot2::theme_bw()
# Save the plot
ggplot2::ggsave(filename = paste0("IDF_plot_year_", date(), ".png"), plot = p, width = 10, height = 8)
}, error = function(e) {
message("Error processing data at index: ", i)
message("Error message: ", e$message)
})
}
}
# Usage of the function
# main
file_paths <- list.files("C:/Users/Ognjen/Documents/data/adv_r_data_test",
pattern = "\\.nc$", full.names = TRUE)
# Prompt the user to enter the file path
#path_input <- readline(prompt = "Enter the path to the data directory: ")
#file_paths <- list.files(path = path_input, pattern = "\\.nc$", full.names = TRUE)
results_list <- process_nc_files(file_paths)
create_and_save_idf_plots(results_list)
#install.packages(c("CoSMoS", "data.table"))
library(CoSMoS);
library(data.table);
library(ncdf4)
library(zoo)
library(extRemes)
library(ggplot2)
library(dplyr)
process_nc_files <- function(file_paths) {
results_list <- list()  # Initialize an empty list to store results
for (file_path in file_paths) {
tryCatch({
nc_data <- nc_open(file_path)
# Read precipitation data and time
precipitation <- ncvar_get(nc_data, "pr")
time <- ncvar_get(nc_data, "time")
time_units <- ncatt_get(nc_data, "time", "units")$value
origin <- as.Date(sub("days since ", "", time_units))
readable_dates <- origin + time
# Close the NetCDF file
nc_close(nc_data)
# Data processing
pr_agg <- apply(precipitation, MARGIN = c(3), FUN = mean, na.rm = TRUE)
pr_agg_converted <- pr_agg * 3600  # Convert from kg/m²/s to mm/hr
precip_date <- data.frame(date = time, val = pr_agg_converted, readable_dates = readable_dates)
# Store the data frames in the list
results_list[[paste0("test_date_", basename(file_path))]] <- precip_date
}, error = function(e) {
message("Error processing file: ", file_path)
message("Error message: ", e$message)
})
}
return(results_list)
}
idf <- function(x,
rp = c(2, 5, 10, 25, 50, 100),
dur = c(1, 2, 5, 10, 24, 48),
aggfun = "mean",
dist = "gev", ...) {
agg <- lapply(
X = dur,
FUN = function(d) {
out <- x[, .(date = date,
val = do.call(what = paste0("froll", aggfun),
args = list(x = val,
n = d,
align = "center",
fill = 0)))]
out
}
)
agg <- c(list(x), agg)
quant <- lapply(
X = agg,
FUN = function(a) {
mx <- a[, .(mx = max(x = val,
na.rm = TRUE)),
by = year(x = date)]
para <- fitDist(data = mx$mx,
dist = dist,
n.points = 10,
norm = "N4",
constrain = FALSE)
prob <- 1 - 1/rp
q <- qgev(p = prob,
loc = para$loc,
scale = para$scale,
shape = para$shape)
names(x = q) <- rp
as.list(x = q)
}
)
names(x = quant) <- c(1, dur)
quant_all <- rbindlist(l = quant,
idcol = "dur")
quant_idf <- melt(data = quant_all,
id.vars = "dur",
variable.name = "rp")
return(quant_idf)
}
# Adjust 'precip' to the actual column name
#### create an IDF curve for
#### 2, 5, 10, 25, 50, 100 year periods and
#### 1, 2, 5, 10, 24, 48 hour duration
# compute and plot idf for every element in the dataset
create_and_save_idf_plots <- function(results_list) {
for (i in seq_along(results_list)) {
tryCatch({
dta <- results_list[[i]]
date <- substr(dta$readable_dates, 1, 4)
# Ensure 'date' and 'val' columns are present
if (!"date" %in% names(dta) || !"val" %in% names(dta)) {
stop("Data frame must contain 'date' and 'val' columns.")
}
# Convert to data.table, if not already
if (!data.table::is.data.table(dta)) {
data.table::setDT(dta)
}
# Process the date column
dta[, date := as.POSIXct(date, origin = "1970-01-01", tz = "UTC")]
# Calculate IDF
test <- idf(x = dta)
# Generate plot
p <- ggplot2::ggplot(data = test, ggplot2::aes(x = as.numeric(dur), y = value, colour = rp)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_colour_manual(name = "Return\nperiod",
values = c("yellow4", "steelblue", "red4", "darkgreen", "pink", "magenta4")) +
ggplot2::labs(x = "Duration (hours)", y = "Intensity (mm/h)", title = paste("IDF curve for year ", date)) +
ggplot2::theme_bw()
# Save the plot
ggplot2::ggsave(filename = paste0("IDF_plot_year_", i , ".png"), plot = p, width = 10, height = 8)
}, error = function(e) {
message("Error processing data at index: ", i)
message("Error message: ", e$message)
})
}
}
# Usage of the function
# main
file_paths <- list.files("C:/Users/Ognjen/Documents/data/adv_r_data_test",
pattern = "\\.nc$", full.names = TRUE)
# Prompt the user to enter the file path
#path_input <- readline(prompt = "Enter the path to the data directory: ")
#file_paths <- list.files(path = path_input, pattern = "\\.nc$", full.names = TRUE)
results_list <- process_nc_files(file_paths)
create_and_save_idf_plots(results_list)
